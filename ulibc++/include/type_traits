// -*- C++ -*-

namespace std {
// from cppreference  "Possible implementation"
template <class T, T v>
struct integral_constant {
  static constexpr T value = v;
  using value_type = T;
  using type = integral_constant;  // using injected-class-name
  constexpr operator value_type() const noexcept { return value; }
  constexpr value_type operator()() const noexcept {
    return value;
  }  // since c++14
};

template <bool B>
using bool_constant = integral_constant<bool, B>;

using true_type = std::integral_constant<bool, true>;
using false_type = std::integral_constant<bool, false>;

template <class T, class U>
struct is_same : false_type {};
template <class T>
struct is_same<T, T> : true_type {};
template <class T, class U>
constexpr bool is_same_v = is_same<T, U>::value;

template <class T>
    struct is_integral
    : std::bool_constant <
      requires(T t, T* p,
               void (*f)(T))  // T* parameter excludes reference types
{
  reinterpret_cast<T>(t);  // Exclude class types
  f(0);                    // Exclude enumeration types
  p + t;  // Exclude everything not yet excluded but integral types
}>{};

template <class T>
constexpr bool is_integral_v = is_integral<T>::value;
}  // namespace std
