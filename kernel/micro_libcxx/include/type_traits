// -*- C++ -*-
#pragma once
#include <cstddef>

namespace std {
template<bool B, typename T = void>
struct enable_if {};

template<typename T>
struct enable_if<true, T> {
    using type = T;
};

template<bool B, typename T = void>
using enable_if_t = typename enable_if<B, T>::type;

template<typename T>
struct type_identity {
    using type = T;
};

template<typename T>
using type_identity_t = typename type_identity<T>::type;

template<bool B, typename T, typename F>
struct conditional {
    using type = T;
};

template<typename T, typename F>
struct conditional<false, T, F> {
    using type = F;
};

template<bool B, typename T, typename F>
using conditional_t = typename conditional<B, T, F>::type;

template<bool B>
struct bool_constant {
    static constexpr bool value = B;
    using type = bool_constant<B>;
    constexpr operator bool() const noexcept { return B; }
    constexpr bool operator()() const noexcept { return B; }
};

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

template<typename T, T v>
struct integral_constant {
    static constexpr T value = v;
    using value_type = T;
    using type = integral_constant<T, v>;
    constexpr operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; }
};


template<typename T>
struct remove_const {
    using type = T;
};

template<typename T>
struct remove_const<const T> {
    using type = T;
};

template<typename T>
using remove_const_t = typename remove_const<T>::type;

template<typename T>
struct remove_volatile {
    using type = T;
};

template<typename T>
struct remove_volatile<volatile T> {
    using type = T;
};

template<typename T>
using remove_volatile_t = typename remove_volatile<T>::type;

template<typename T>
struct remove_cv {
    using type = typename remove_volatile<typename remove_const<T>::type>::type;
};

template<typename T>
using remove_cv_t = typename remove_cv<T>::type;

template<typename T, typename U>
struct is_same : false_type {};

template<typename T>
struct is_same<T, T> : true_type {};

template<typename T, typename U>
inline constexpr bool is_same_v = is_same<T, U>::value;

template<typename T>
struct is_void : is_same<void, typename remove_cv<T>::type> {};

template<typename T>
inline constexpr bool is_void_v = is_void<T>::value;

template<typename T>
struct remove_reference {
    using type = T;
};

template<typename T>
struct remove_reference<T&> {
    using type = T;
};

template<typename T>
struct remove_reference<T&&> {
    using type = T;
};

template<typename T>
using remove_reference_t = typename remove_reference<T>::type;

template<typename T>
struct is_lvalue_reference : false_type {};

template<typename T>
struct is_lvalue_reference<T&> : true_type {};

template<typename T>
inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

template<typename T>
struct is_rvalue_reference : false_type {};

template<typename T>
struct is_rvalue_reference<T&&> : true_type {};

template<typename T>
inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

template<typename T>
struct is_reference : bool_constant<is_lvalue_reference_v<T> || is_rvalue_reference_v<T>> {};

template<typename T>
inline constexpr bool is_reference_v = is_reference<T>::value;

template<typename T>
struct add_lvalue_reference {
    using type = T&;
};

template<>
struct add_lvalue_reference<void> {
    using type = void;
};

template<>
struct add_lvalue_reference<const void> {
    using type = const void;
};

template<>
struct add_lvalue_reference<volatile void> {
    using type = volatile void;
};

template<>
struct add_lvalue_reference<const volatile void> {
    using type = const volatile void;
};

template<typename T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

template<typename T>
struct add_rvalue_reference {
    using type = T&&;
};

template<>
struct add_rvalue_reference<void> {
    using type = void;
};

template<>
struct add_rvalue_reference<const void> {
    using type = const void;
};

template<>
struct add_rvalue_reference<volatile void> {
    using type = volatile void;
};

template<>
struct add_rvalue_reference<const volatile void> {
    using type = const volatile void;
};

template<typename T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

template<typename T>
struct is_const : false_type {};

template<typename T>
struct is_const<const T> : true_type {};

template<typename T>
inline constexpr bool is_const_v = is_const<T>::value;

template<typename T>
struct is_volatile : false_type {};

template<typename T>
struct is_volatile<volatile T> : true_type {};

template<typename T>
inline constexpr bool is_volatile_v = is_volatile<T>::value;

template<typename T>
struct add_const {
    using type = const T;
};

template<typename T>
using add_const_t = typename add_const<T>::type;

template<typename T>
struct add_volatile {
    using type = volatile T;
};

template<typename T>
using add_volatile_t = typename add_volatile<T>::type;

template<typename T>
struct add_cv {
    using type = const volatile T;
};

template<typename T>
using add_cv_t = typename add_cv<T>::type;

template<typename T>
struct remove_cvref {
    using type = typename remove_cv<typename remove_reference<T>::type>::type;
};

template<typename T>
using remove_cvref_t = typename remove_cvref<T>::type;

template<typename T>
struct remove_pointer {
    using type = T;
};

template<typename T>
struct remove_pointer<T*> {
    using type = T;
};

template<typename T>
struct remove_pointer<T* const> {
    using type = T;
};

template<typename T>
struct remove_pointer<T* volatile> {
    using type = T;
};

template<typename T>
struct remove_pointer<T* const volatile> {
    using type = T;
};

template<typename T>
using remove_pointer_t = typename remove_pointer<T>::type;

template<typename T>
struct add_pointer {
    using type = typename remove_reference<T>::type*;
};

template<typename T>
using add_pointer_t = typename add_pointer<T>::type;

template<typename T>
struct is_pointer : false_type {};

template<typename T>
struct is_pointer<T*> : true_type {};

template<typename T>
struct is_pointer<T* const> : true_type {};

template<typename T>
struct is_pointer<T* volatile> : true_type {};

template<typename T>
struct is_pointer<T* const volatile> : true_type {};

template<typename T>
inline constexpr bool is_pointer_v = is_pointer_v<T>;

template<typename T>
struct is_array : false_type {};

template<typename T>
struct is_array<T[]> : true_type {};

template<typename T, size_t N>
struct is_array<T[N]> : true_type {};

template<typename T>
inline constexpr bool is_array_v = is_array<T>::value;

template<typename T>
struct remove_extent {
    using type = T;
};

template<typename T>
struct remove_extent<T[]> {
    using type = T;
};

template<typename T, size_t N>
struct remove_extent<T[N]> {
    using type = T;
};

template<typename T>
using remove_extent_t = typename remove_extent<T>::type;

template<typename T>
struct remove_all_extents {
    using type = T;
};

template<typename T>
struct remove_all_extents<T[]> {
    using type = typename remove_all_extents<T>::type;
};

template<typename T, size_t N>
struct remove_all_extents<T[N]> {
    using type = typename remove_all_extents<T>::type;
};

template<typename T>
using remove_all_extents_t = typename remove_all_extents<T>::type;

template<typename T>
struct is_integral : false_type {};

template<> struct is_integral<bool> : true_type {};
template<> struct is_integral<char> : true_type {};
template<> struct is_integral<signed char> : true_type {};
template<> struct is_integral<unsigned char> : true_type {};
template<> struct is_integral<wchar_t> : true_type {};
template<> struct is_integral<char16_t> : true_type {};
template<> struct is_integral<char32_t> : true_type {};
template<> struct is_integral<short> : true_type {};
template<> struct is_integral<unsigned short> : true_type {};
template<> struct is_integral<int> : true_type {};
template<> struct is_integral<unsigned int> : true_type {};
template<> struct is_integral<long> : true_type {};
template<> struct is_integral<unsigned long> : true_type {};
template<> struct is_integral<long long> : true_type {};
template<> struct is_integral<unsigned long long> : true_type {};
template<> struct is_integral<char8_t> : true_type {};

template<typename T> struct is_integral<const T> : is_integral<T> {};
template<typename T> struct is_integral<volatile T> : is_integral<T> {};
template<typename T> struct is_integral<const volatile T> : is_integral<T> {};

template<typename T>
inline constexpr bool is_integral_v = is_integral<T>::value;

template<typename T>
struct is_signed {
    static constexpr bool value = false;
};

template<> struct is_signed<char>                { static constexpr bool value = (char)-1 < 0; };
template<> struct is_signed<signed char>        { static constexpr bool value = true; };
template<> struct is_signed<short>              { static constexpr bool value = true; };
template<> struct is_signed<int>                { static constexpr bool value = true; };
template<> struct is_signed<long>               { static constexpr bool value = true; };
template<> struct is_signed<long long>          { static constexpr bool value = true; };
template<> struct is_signed<float>              { static constexpr bool value = true; };
template<> struct is_signed<double>             { static constexpr bool value = true; };
template<> struct is_signed<long double>        { static constexpr bool value = true; };

template<typename T>
constexpr bool is_signed_v = is_signed<T>::value;

template<typename T>
struct make_unsigned {
    static_assert(sizeof(T) == 0, "Unsupported type for make_unsigned");
};

template<> struct make_unsigned<char>            { using type = unsigned char; };
template<> struct make_unsigned<signed char>     { using type = unsigned char; };
template<> struct make_unsigned<short>           { using type = unsigned short; };
template<> struct make_unsigned<int>             { using type = unsigned int; };
template<> struct make_unsigned<long>            { using type = unsigned long; };
template<> struct make_unsigned<long long>       { using type = unsigned long long; };

template<> struct make_unsigned<unsigned char>     { using type = unsigned char; };
template<> struct make_unsigned<unsigned short>    { using type = unsigned short; };
template<> struct make_unsigned<unsigned int>      { using type = unsigned int; };
template<> struct make_unsigned<unsigned long>     { using type = unsigned long; };
template<> struct make_unsigned<unsigned long long>{ using type = unsigned long long; };

template<typename T>
using make_unsigned_t = typename make_unsigned<T>::type;

template<typename T>
struct is_floating_point : false_type {};

template<> struct is_floating_point<float> : true_type {};
template<> struct is_floating_point<double> : true_type {};
template<> struct is_floating_point<long double> : true_type {};

template<typename T> struct is_floating_point<const T> : is_floating_point<T> {};
template<typename T> struct is_floating_point<volatile T> : is_floating_point<T> {};
template<typename T> struct is_floating_point<const volatile T> : is_floating_point<T> {};

template<typename T>
inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

template<typename T>
struct is_arithmetic : bool_constant<is_integral_v<T> || is_floating_point_v<T>> {};

template<typename T>
inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

template<typename T>
struct is_fundamental : bool_constant<
    is_arithmetic_v<T> ||
    is_void_v<T> ||
    is_same_v<nullptr_t, remove_cv_t<T>>
> {};

template<typename T>
inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

template<typename>
struct is_function : false_type {};

template<typename R, typename... Args>
struct is_function<R(Args...)> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) const> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) volatile> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) const volatile> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) const &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) volatile &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) const volatile &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) const &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) volatile &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args...) const volatile &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...)> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) const> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) volatile> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) const volatile> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) const &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) volatile &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) const volatile &> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) const &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) volatile &&> : true_type {};

template<typename R, typename... Args>
struct is_function<R(Args..., ...) const volatile &&> : true_type {};

template<typename T>
inline constexpr bool is_function_v = is_function<T>::value;

template<typename T>
struct is_object : bool_constant<
    !is_function_v<T> &&
    !is_reference_v<T> &&
    !is_void_v<T>
> {};

template<typename T>
inline constexpr bool is_object_v = is_object<T>::value;

template<typename T>
struct is_function;

template<typename T>
struct is_enum;

template<typename T>
struct is_member_pointer;

template<typename T>
inline constexpr bool is_enum_v = is_enum<T>::value;

template<typename T>
inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;
template<typename T>
struct is_scalar : bool_constant<
    is_arithmetic_v<T> ||
    is_enum_v<T> ||
    is_pointer_v<T> ||
    is_member_pointer_v<T> ||
    is_same_v<nullptr_t, remove_cv_t<T>>
> {};

template<typename T, typename... Args>
struct is_constructible;

template<typename T, typename U>
struct is_assignable;

template<typename T, typename... Args>
inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

template<typename T, typename U>
inline constexpr bool is_assignable_v = is_assignable<T, U>::value;

template<typename T, typename... Args>
struct is_constructible : bool_constant<__is_constructible(T, Args...)> {};

template<typename T, typename U>
struct is_assignable : bool_constant<__is_assignable(T, U)> {};

template<typename T>
inline constexpr bool is_scalar_v = is_scalar<T>::value;

template<typename T>
struct is_copy_constructible : bool_constant<
    std::is_constructible_v<T, const T&>
> {};

template<typename T>
inline constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;

template<typename T>
struct is_move_constructible : bool_constant<
    std::is_constructible_v<T, T&&>
> {};

template<typename T>
inline constexpr bool is_move_constructible_v = is_move_constructible<T>::value;

template<typename T>
struct is_copy_assignable : bool_constant<
    std::is_assignable_v<T&, const T&>
> {};

template<typename T>
inline constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;

template<typename T>
struct is_move_assignable : bool_constant<
    std::is_assignable_v<T&, T&&>
> {};

template<typename T>
inline constexpr bool is_move_assignable_v = is_move_assignable<T>::value;


template<typename T, typename U>
struct cmp_equal : bool_constant<is_same_v<T, U>> {};

template<typename T, typename U>
inline constexpr bool cmp_equal_v = cmp_equal<T, U>::value;

template<typename T, typename U>
struct cmp_not_equal : bool_constant<!cmp_equal_v<T, U>> {};

template<typename T, typename U>
inline constexpr bool cmp_not_equal_v = cmp_not_equal<T, U>::value;

template<typename T, typename U = T>
struct compare_three_way_result {};
} // namespace std
