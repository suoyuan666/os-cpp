// -*- C++ -*-
#pragma once

#include <cstdint>
namespace proc {
struct cpu;
}  // namespace proc

namespace lock {
class spinlock {
  bool locked{false};

  [[maybe_unused]] const char *name{};
  struct proc::cpu *cpu{};

 public:
  spinlock() = default;
  explicit spinlock(const char *name) : name(name) {};

  auto acquire() -> void;
  auto release() -> void;

  auto holding() -> bool;
};

auto push_off() -> void;
auto pop_off() -> void;

class sleeplock {
  bool locked{false};
  class spinlock lk{"sleep lock"};

  [[maybe_unused]] const char *name{};
  uint32_t pid{0};

 public:
  sleeplock() = default;
  explicit sleeplock(const char *name) : name(name) {};

  auto acquire() -> void;
  auto release() -> void;

  auto holding() -> bool;
};
}  // namespace lock
